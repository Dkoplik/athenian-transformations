use egui::Pos2;
use transform2d::Transform2D;

pub mod transform2d;

// --------------------------------------------------
// Реализация полигона
// --------------------------------------------------

/// Представление полигона. Точка и вектор тоже считаются полигонами.
#[derive(Debug, Clone, PartialEq)]
pub struct Polygon {
    /// Точки полигона. Рёбра идут в направлении от ранних точек к поздним.
    vertexes: Vec<Pos2>,
    intersections: Vec<Pos2>,
}

// --------------------------------------------------
// Конструкторы
// --------------------------------------------------
impl Polygon {
    /// Создание полигона из одной точки
    pub fn new(x: f32, y: f32) -> Self{
        Self {
            vertexes: vec![Pos2::new(x, y)],
            intersections: vec![],
        }
    }

    /// Создание полигона из одной точки
    pub fn from_pos(pos: Pos2) -> Self{
        Self::new(pos.x, pos.y)
    }
}

// --------------------------------------------------
// Операции над полигоном (его изменение)
// --------------------------------------------------

impl Polygon {
    /// Добавить вершину (точку) в полигон.
    pub fn add_vertex(&mut self, x: f32, y: f32) {
        // TODO при добавлении новой вершины надо ещё добавить новые точки пересечения рёбер (если имеются)
        // Лучше проверку на наличие пересечений выделить в отдельный приватный метод,
        // при этом не надо в self.intersections добавлять уже добавленные пересечения.
    }

    /// Добавить вершину (точку) в полигон.
    pub fn add_vertex_pos(&mut self, pos: Pos2) {
        self.add_vertex(pos.x, pos.y);
    }

    /// Применить аффинное преобразование.
    pub fn apply_transform(&mut self, transform: Transform2D) {
        // TODO тупо применить преобразование для всех точек полигона
    }
}

// --------------------------------------------------
// Проверки полигона
// --------------------------------------------------

impl Polygon {
    /// Состоит ли полигон только из одной вершины?
    pub fn is_vertex(&self) -> bool {
        self.vertexes.len() == 1
    }

    /// Состоит ли полигон только из одного ребра?
    pub fn is_edge(&self) -> bool {
        self.vertexes.len() == 2
    }

    /// Является ли полигон выпуклым?
    pub fn is_convex(&self) -> bool {
        // TODO проверка на выпуклость текущего полигона
        false
    }

    /// Содержит ли полигон заданную точку?
    pub fn contains(&self, x: f32, y: f32) -> bool {
        // TODO проверка, содержит ли полигон эту точку.
        // Текущий полигон может быть точкой, прямой, выпкулым или невыпуклым многоугольником.
        false
    }

    /// Содержит ли полигон заданную точку?
    pub fn contains_pos(&self, pos: Pos2) -> bool {
        self.contains(pos.x, pos.y)
    }
}
